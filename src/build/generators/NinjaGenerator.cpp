/*
 * (C) 2015-2016 Augustin Cavalier
 * All rights reserved. Distributed under the terms of the MIT license.
 */
#include "NinjaGenerator.h"

#include "Phoenix.h"
#include "util/FSUtil.h"
#include "util/StringUtil.h"

using std::string;
using std::vector;

NinjaGenerator::NinjaGenerator()
{
}
NinjaGenerator::~NinjaGenerator()
{
}

string NinjaGenerator::escapeString(const string& str)
{
	string ret = str;
	StringUtil::replaceAll(ret, ":", "$:");
	StringUtil::replaceAll(ret, " ", "$ ");
	return ret;
}

void NinjaGenerator::setBuildScriptFiles(string program, const vector<string> files)
{
	fRulesLines.push_back("rule RERUN_PHOENIX\n"
		"  command = " + program + "\n"
		"  description = Re-running Phoenix...\n"
		"  generator = 1\n"
		//"  pool = console\n" // Check for Ninja 1.5 first
		);
	string phony = "build"; // So it doesn't error out if a file is missing
	string build = "build build.ninja: RERUN_PHOENIX |";
	for (string file : files) {
		string add = " " + escapeString(file);
		build += add;
		phony += add;
	}
	phony += ": phony\n";
	fBuildLines.push_back(build);
	fBuildLines.push_back(phony);
}

void NinjaGenerator::addRegularRule(const string& ruleName, const string& descName,
	const vector<string>& forExts, const string& program, const string& outFileExt,
	const string& rule)
{
	string realRule = rule;
	StringUtil::replaceAll(realRule, "%INPUTFILE%", "$in");
	StringUtil::replaceAll(realRule, "%OUTPUTFILE%", "$out");
	StringUtil::replaceAll(realRule, "%TARGETFLAGS%", "$targetflags");
	fRulesLines.push_back("rule " + ruleName + "\n"
		"  command = " + program + " " + realRule + "\n"
		"  description = " + descName + " $out\n"
		//"  depfile = $out.d\n"
		//"  deps = gcc\n"
		);

	RuleForExt itm;
	itm.outFileExt = outFileExt;
	itm.ruleName = ruleName;
	for (string ext : forExts)
		fRulesForExts.insert({ext, itm});
}

void NinjaGenerator::setProgramLinkRule(const string& rule, const string& ruleDescription)
{
	string realRule = rule;
	StringUtil::replaceAll(realRule, "%INPUTFILE%", "$in");
	StringUtil::replaceAll(realRule, "%OUTPUTFILE%", "$out");
	StringUtil::replaceAll(realRule, "%TARGETFLAGS%", "$targetflags");
	fRulesLines.push_back("rule link\n"
		"  command = " + realRule + "\n"
		"  description = " + ruleDescription + " $out");
}

void NinjaGenerator::addTarget(const string& outputBinaryName,
	const vector<string>& inputFiles, const string& targetFlags)
{
	vector<string> outfiles;
	string targetflagsvar = "tf_" + StringUtil::split(outputBinaryName, ".")[0];
	if (!targetFlags.empty())
		fBuildLines.push_back(targetflagsvar + " = " + targetFlags);
	for (string file : inputFiles) {
		vector<string> splitByDot = StringUtil::split(file, ".");
		vector<string> splitBySlash = StringUtil::split(file, "/");
		string ext = "." + splitByDot[splitByDot.size() - 1];
		RuleForExt rule = fRulesForExts[ext];
		string outFile = "build-" + outputBinaryName + "/" +
			splitBySlash[splitBySlash.size() - 1] + rule.outFileExt;
		outfiles.push_back(outFile);

		string line = "build " + escapeString(outFile) + ": " +
			rule.ruleName + " " + escapeString(file);
		if (targetflagsvar.length())
			line += "\n  targetflags = $" + targetflagsvar;
		fBuildLines.push_back(line);
	}
	std::string targetFile = /* TODO: runtimeOutputDirectory */ outputBinaryName;
	fBuildLines.push_back("build " + targetFile + ": " +
		"link " + StringUtil::join(outfiles, " ") + "\n");
	fTargets.push_back(targetFile);
}

vector<string> NinjaGenerator::outputFiles()
{
	return {"build.ninja"};
}
void NinjaGenerator::write()
{
	FSUtil::putContents("build.ninja",
		"# This file was automatically generated by Phoenix " PHOENIX_VERSION "\n"
		"# ALL CHANGES WILL BE LOST ON NEXT REGENERATION!\n"
		"ninja_required_version = 1.3\n\n"

		// Default targets/commands
		"rule CLEAN\n"
		"  command = ninja -t clean\n"
		"  description = Cleaning all built files...\n"
		"build clean: CLEAN\n\n"

		// Default variables
		"targetflags = \n\n" +

		// Actual build stuff
		StringUtil::join(fRulesLines, "\n") + "\n" +
		StringUtil::join(fBuildLines, "\n") + "\n" +

		// "all" target & target defaults
		"build all: phony " + StringUtil::join(fTargets, " ") + "\n" +
		"default all\n");
}
